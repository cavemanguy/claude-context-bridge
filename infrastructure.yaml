AWSTemplateFormatVersion: '2010-09-09'
Description: 'Claude Context Bridge Infrastructure'

Parameters:
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Description: 'Anthropic API Key for Claude'

Resources:
  # DynamoDB Tables
  ContextTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: claude-context-sessions
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  HashTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: claude-context-hashes
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: hash_id
          AttributeType: S
      KeySchema:
        - AttributeName: hash_id
          KeyType: HASH

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt ContextTable.Arn
                  - !GetAtt HashTable.Arn
        - PolicyName: WebSocketAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  # Lambda Function
  ContextBridgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: claude-context-bridge
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': json.dumps('Hello from Lambda!')}
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          CONTEXT_TABLE: !Ref ContextTable
          HASH_TABLE: !Ref HashTable
      Timeout: 30

  # API Gateway WebSocket
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: claude-context-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ContextBridgeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'

  # WebSocket Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      Target: !Sub 'integrations/${ConnectIntegration}'

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      Target: !Sub 'integrations/${DisconnectIntegration}'

  QueryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: query
      Target: !Sub 'integrations/${QueryIntegration}'

  # WebSocket Integrations
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContextBridgeFunction.Arn}/invocations'

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContextBridgeFunction.Arn}/invocations'

  QueryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContextBridgeFunction.Arn}/invocations'

  # WebSocket Stage
  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      StageName: prod
      AutoDeploy: true

Outputs:
  WebSocketURL:
    Description: 'WebSocket URL for Claude Context Bridge'
    Value: !Sub 'wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
  
  LambdaFunctionName:
    Description: 'Lambda Function Name'
    Value: !Ref ContextBridgeFunction